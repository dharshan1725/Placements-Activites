
import java.util.*;

public class Solution {

    public int networkDelayTime(int[][] times, int n, int k) {
        List<List<int[]>> graph = new ArrayList<>();
        
        // Build adjacency list
        for (int i = 0; i <= n; i++) graph.add(new ArrayList<>());
        for (int[] time : times) {
            graph.get(time[0]).add(new int[]{time[1], time[2]});
        }

        // Dijkstra's algorithm
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]); // [node, time]
        pq.offer(new int[]{k, 0});
        int[] dist = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[k] = 0;

        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            int node = curr[0], time = curr[1];

            for (int[] neighbor : graph.get(node)) {
                int next = neighbor[0], edgeTime = neighbor[1];
                if (time + edgeTime < dist[next]) {
                    dist[next] = time + edgeTime;
                    pq.offer(new int[]{next, dist[next]});
                }
            }
        }

        int max = 0;
        for (int i = 1; i <= n; i++) {
            if (dist[i] == Integer.MAX_VALUE) return -1;
            max = Math.max(max, dist[i]);
        }

        return max;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Solution sol = new Solution();

        // Read number of edges
        int m = scanner.nextInt();
        int[][] times = new int[m][3];

        // Read edges
        for (int i = 0; i < m; i++) {
            times[i][0] = scanner.nextInt();
            times[i][1] = scanner.nextInt();
            times[i][2] = scanner.nextInt();
        }

        // Read number of nodes and starting node
        int n = scanner.nextInt();
        int k = scanner.nextInt();

        int result = sol.networkDelayTime(times, n, k);
        System.out.println(result);
    }
}


