
import java.util.*;

public class Solution {

    public boolean isBipartite(int[][] graph) 
    {
       
       int[] color=new int[graph.length];
       Arrays.fill(color,-1);
       for(int i=0;i<graph.length;i++){
       
           if(color[i]==-1){
               if(bfs(graph,color,i)==false){
                   return false;
               }
           }
       }
       return true;
       
       //Type Your Code Here
       
       
       
       
    }

    boolean bfs(int[][] graph, int[] color, int node) {
        Queue<Integer> queue = new LinkedList<>();
        color[node] = 0;
        queue.add(node);
        while (!queue.isEmpty()) {
            int n = queue.poll();
            for (int neighbor : graph[n]) {
                if (color[neighbor] == -1) {
                    color[neighbor] = color[n] ^ 1;
                    queue.add(neighbor);
                } else if (color[neighbor] == color[n]) {
                    return false;
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Solution sol = new Solution();

        int n = scanner.nextInt(); // number of nodes
        int[][] graph = new int[n][];

        for (int i = 0; i < n; i++) {
            int m = scanner.nextInt(); // number of neighbors
            graph[i] = new int[m];
            for (int j = 0; j < m; j++) {
                graph[i][j] = scanner.nextInt();
            }
        }

        boolean result = sol.isBipartite(graph);
        System.out.println(result);

        scanner.close();
    }
}

