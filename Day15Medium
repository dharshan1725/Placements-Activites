
import java.util.*;

class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    private ListNode current;

    public TreeNode sortedListToBST(ListNode head) {
        int size = getSize(head);
        current = head;
        return buildBST(0, size - 1);
    }

    private int getSize(ListNode node) {
        int size = 0;
        while (node != null) {
            size++;
            node = node.next;
        }
        return size;
    }

    private TreeNode buildBST(int start, int end) {
        if (start > end) return null;

        int mid = start + (end - start) / 2;

        TreeNode left = buildBST(start, mid - 1);

        TreeNode root = new TreeNode(current.val);
        current = current.next;

        root.left = left;
        root.right = buildBST(mid + 1, end);

        return root;
    }

    public List<String> levelOrderWithNulls(TreeNode root) {
        List<String> result = new ArrayList<>();
        if (root == null) return result;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            TreeNode node = queue.poll();
            if (node == null) {
                result.add("null");
            } else {
                result.add(String.valueOf(node.val));
                queue.offer(node.left);
                queue.offer(node.right);
            }
        }

        // Trim trailing nulls
        int i = result.size() - 1;
        while (i >= 0 && result.get(i).equals("null")) {
            result.remove(i);
            i--;
        }

        return result;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Solution solution = new Solution();

        String input = scanner.nextLine().trim();
        input = input.replaceAll("[\\[\\]\\s]", "");
        String[] parts = input.split(",");
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        for (String part : parts) {
            if (!part.isEmpty()) {
                current.next = new ListNode(Integer.parseInt(part));
                current = current.next;
            }
        }

        TreeNode root = solution.sortedListToBST(dummy.next);
        List<String> output = solution.levelOrderWithNulls(root);

        System.out.println(output);

        scanner.close();
    }
}




   